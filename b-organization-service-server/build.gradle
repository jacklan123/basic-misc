/*
 * This file was generated by the Gradle 'init' task.
 */

buildscript {

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.1.3.RELEASE"
        classpath "gradle.plugin.com.arenagod.gradle:mybatis-generator-plugin:1.4"
    }
}

plugins {
    id 'com.google.cloud.tools.jib' version '1.4.0'
    id 'com.palantir.git-version' version '0.11.0'
    id "org.springframework.boot" version "2.1.3.RELEASE"
    id "org.springframework.boot" version "2.1.3.RELEASE"
}

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
}

apply plugin: 'maven'

dependencies {

    /**
     * 如果你的项目的mysql客户端的版本是8.*.* ,8.0jar包里面的默认时区，如果不在创建数据库连接的时候指定时区，存入数据库的时间会有问题
     * 解决办法：jdbc连接的url后面加上serverTimezone=GMT%2B8
     * https://blog.csdn.net/ShenJiaXingY/article/details/78850634
     */
    def mybatisPlusVersion = "3.1.1"
    def springBootVersion = "2.1.6.RELEASE"
    def mysqlConnectorVersion = "5.1.48"
    def dubboVersion = "2.6.2"
    def springVersion = '5.1.5.RELEASE'

    compile project(':b-organization-service-api')

    // 版本对齐
    implementation "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-aop:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-undertow:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-jdbc:${springBootVersion}"
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")


    compile "org.springframework:spring-context:${springVersion}"
    compile "org.springframework:spring-jdbc:${springVersion}"
    compile "org.springframework:spring-tx:${springVersion}"

    // 下面为dubbo注册中心依赖到的包
    implementation 'com.alibaba.boot:dubbo-spring-boot-starter:0.2.0'
    compile('org.apache.zookeeper:zookeeper:3.4.13') {
        exclude group: "log4j", module: "log4j"
        exclude group: "org.slf4j", module: "slf4j-log4j12"
    }

    // config center
    implementation 'com.ctrip.framework.apollo:apollo-client:1.4.0'

    // database
    implementation "mysql:mysql-connector-java:${mysqlConnectorVersion}"
    compile ('com.alibaba:druid-spring-boot-starter:1.1.17')
    compile ('org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.0')

    compile 'com.fangdd:seed-common:1.0.0-SNAPSHOT'

    compile 'com.fasterxml.jackson.core:jackson-annotations:2.9.0'

    testCompile 'com.github.jsonzou:jmockdata:4.1.1'
    testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"

}

description = 'b-organization-service-server'

task('distZip', dependsOn: 'assemble')
tasks.distZip.dependsOn tasks.jib
def details = versionDetails()

jib {
    from {
        image = 'docker.esf.fangdd.net/fdd-java:8'
    }
    to {
        image = 'docker.esf.fangdd.net/ap.organization.service'
        tags = ["${details.gitHashFull}".toString()]
    }
    container {
        entrypoint = 'INHERIT'
        args = ['/bin/sh', '-c', '''java $FDD_JVM_OPTS -javaagent:/data0/java/deploy/pinpoint.agent/pinpoint-bootstrap.jar\
 -Dpinpoint.agentId=$(hostname -i | cut -d' ' -f1) -Dpinpoint.applicationName=ap.organization.service\
-XX:MaxMetaspaceSize=128M -XX:MetaspaceSize=128M -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:+DisableExplicitGC\
-DLOGS_DIR=/data0/logs/java/ap.organization.service -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/data0/logs/java/ap.organization.service -cp\
/app/resources:/app/classes:/app/libs/* com.fangdd.organization.server.Application''']
    }
}
